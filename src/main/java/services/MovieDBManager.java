package services;

import java.io.IOException;
import java.sql.*;
import java.util.*;

import javax.enterprise.context.ApplicationScoped;

import project.*;



@ApplicationScoped
public class MovieDBManager {

	private Connection conn;
	private Statement stmt;
	private PreparedStatement addMovieStmt;
	private PreparedStatement getMovieStmt;
	private PreparedStatement deleteAllMovieStmt;
	private PreparedStatement findMovieByNameStmt;
	private PreparedStatement findMovieByTypeStmt;
	private PreparedStatement deleteMovieStmt;
	
	List<Integer> listID = new ArrayList<Integer>();
	
	public MovieDBManager() 
	{
		try 
		{
			
			conn = DriverManager
					.getConnection("jdbc:hsqldb:hsql://localhost/workdb");

			stmt = conn.createStatement();
			boolean MovieTableExists = false;

			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);

			while (rs.next()) 
			{
				if ("Movie".equalsIgnoreCase(rs.getString("TABLE_NAME"))) 
				{
					MovieTableExists = true;
					break;
				}
			}

			if (!MovieTableExists) 
			{
				stmt.executeUpdate("CREATE TABLE Movie(id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,name varchar(40), movieType varchar(20), year integer, price integer)");
			}


			addMovieStmt = conn.prepareStatement("INSERT INTO Movie (name, movieType, year, price) VALUES (?, ?, ?, ?)");

			getMovieStmt = conn.prepareStatement("SELECT * FROM Movie");
			
			deleteAllMovieStmt = conn.prepareStatement("DELETE FROM Movie");
			
			findMovieByNameStmt = conn.prepareStatement("SELECT id FROM Movie WHERE name = ?");
			
			findMovieByTypeStmt = conn.prepareStatement("SELECT id FROM Movie WHERE movieType = ?");
			
			deleteMovieStmt = conn.prepareStatement("DELETE FROM Movie WHERE id = ?");
		} 
		catch (SQLException e) 
		{

			e.printStackTrace();
		}
	}

	public void addMovie(Movie Movie) 
	{
		try 
		{
			addMovieStmt.setString(1, Movie.getName());
			addMovieStmt.setString(2, Movie.getMovieType().toString());
			addMovieStmt.setInt(3, Movie.getReleaseYear());
			addMovieStmt.setInt(4, Movie.getPrice());
			addMovieStmt.executeUpdate();
		} 
		catch (SQLException e) 
		{

			e.printStackTrace();
		}

	}

	public List<Movie> getAllMovies() 
	{
		List<Movie> Movie = new ArrayList<Movie>();
		try 
		{
			ResultSet rs = getMovieStmt.executeQuery();
			while (rs.next()) 
			{
				MovieType movieType = null;
				if (rs.getString("movieType").equals("Comedy"))
					movieType = MovieType.Comedy;
				if (rs.getString("movieType").equals("Horror"))
					movieType = MovieType.Horror;
				if (rs.getString("movieType").equals("Thriller"))
					movieType = MovieType.Thriller;
				
				Movie.add(new Movie(rs.getString("name"),movieType,rs.getInt("year"),rs.getInt("price")));
			}

		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
		return Movie;
	}

	public void deleteAllMovie() 
	{
		try 
		{
			deleteAllMovieStmt.executeUpdate();
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
	}
	
	public List<Integer> findMovieByName(String name)
	{
		try 
		{
			List<Integer> result = new ArrayList<Integer>();
			findMovieByNameStmt.setString(1, name);
			ResultSet rs = findMovieByNameStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));	
			return result;
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
		return null;
	}
	
	public List<Integer> findMovieByType(MovieType movieType)
	{
		try 
		{
			List<Integer> result = new ArrayList<Integer>();
			findMovieByTypeStmt.setString(1, movieType.toString());
			ResultSet rs = findMovieByTypeStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
		return null;
	}
	
	public void deleteMovie(List<Integer> list)
	{
		try 
		{
			for (Integer id : list)
			{
				deleteMovieStmt.setInt(1, id);
				deleteMovieStmt.executeUpdate();
			}
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
	}
	
	public void printMovieWithCondition(List<Movie> listMovie,Condition condition)
	{
		for (Movie movie : listMovie)
		{
			if (condition.getCondition(movie))
			{
				System.out.println("Name: " + movie.getName() + "\tMovieType: " + movie.getMovieType() + "\tReleasedYear: " + movie.getReleaseYear() + "\tPrice: " + movie.getPrice());
			}
		}
	}
	


}
